// RegisterDlg.cpp : implementation file
//

#include "stdafx.h"
#include "iControl.h"
#include "RegisterDlg.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#undef THIS_FILE
static char THIS_FILE[] = __FILE__;
#endif

/////////////////////////////////////////////////////////////////////////////
// CRegisterDlg dialog


CRegisterDlg::CRegisterDlg(CWnd* pParent /*=NULL*/)
	: CDialog(CRegisterDlg::IDD, pParent)
{
	//{{AFX_DATA_INIT(CRegisterDlg)
	m_strACode = _T("");
	m_strECode = _T("");
	//}}AFX_DATA_INIT
}


void CRegisterDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialog::DoDataExchange(pDX);
	//{{AFX_DATA_MAP(CRegisterDlg)
	DDX_Control(pDX, IDC_E_EDIT, m_PrivateCodeEdit);
	DDX_Control(pDX, IDC_A_EDIT, m_PublicCodeEdit);
	DDX_Text(pDX, IDC_A_EDIT, m_strACode);
	DDV_MaxChars(pDX, m_strACode, 16);
	DDX_Text(pDX, IDC_E_EDIT, m_strECode);
	DDV_MaxChars(pDX, m_strECode, 16);
	//}}AFX_DATA_MAP
}


BEGIN_MESSAGE_MAP(CRegisterDlg, CDialog)
	//{{AFX_MSG_MAP(CRegisterDlg)
	ON_BN_CLICKED(IDOK, OnRegister)
	ON_WM_CTLCOLOR()
	ON_WM_DESTROY()
	//}}AFX_MSG_MAP
END_MESSAGE_MAP()

/////////////////////////////////////////////////////////////////////////////
// CRegisterDlg message handlers

BOOL CRegisterDlg::OnInitDialog() 
{
	CDialog::OnInitDialog();
	
	// TODO: Add extra initialization here
	ShowWindow(SW_HIDE);

	m_bIsRegister = FALSE;
	
	m_pStaticAFont = new CFont;
	m_pStaticAFont->CreateFont(24, 0, 0, 0, FW_MEDIUM, 0, 0, 0, GB2312_CHARSET, OUT_TT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_SWISS, "楷体_GB2312");

	m_pStaticBFont = new CFont;
	m_pStaticBFont->CreateFont(24, 0, 0, 0, FW_MEDIUM, 0, 0, 0, GB2312_CHARSET, OUT_TT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_SWISS, "楷体_GB2312");
	
	m_pEditAFont = new CFont;
	m_pEditAFont->CreateFont(20, 0, 0, 0, FW_MEDIUM, 0, 0, 0, GB2312_CHARSET, OUT_TT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_SWISS, "Courier New");

	m_pEditBFont = new CFont;
	m_pEditBFont->CreateFont(20, 0, 0, 0, FW_MEDIUM, 0, 0, 0, GB2312_CHARSET, OUT_TT_PRECIS, CLIP_DEFAULT_PRECIS, DEFAULT_QUALITY, VARIABLE_PITCH | FF_SWISS, "Courier New");
	
	m_PublicCodeEdit.SetFont(m_pEditAFont, TRUE);			// 改变控件行高, 以便适应字体大小
	m_PrivateCodeEdit.SetFont(m_pEditBFont, TRUE);			// 改变控件行高, 以便适应字体大小

	m_strACode.Format("");
	m_strECode.Format("");
	UpdateData(FALSE);

	m_RegCtrl.CreateRegtrySubKey(HKEY_CURRENT_USER, "Software\\Microsoft\\Spunky\\iControl");

	CString szRegistry;
	if (m_RegCtrl.ReadRegistryValue(HKEY_CURRENT_USER, "Software\\Microsoft\\Spunky\\iControl", "MachineCode", szRegistry))
	{
		szRegistry.Format("%s", szRegistry);
		if (m_RegCtrl.ActiveByComputerCode(szRegistry))
		{
			m_bIsRegister = TRUE;
			CDialog::OnOK();
			return TRUE;
		}
	}

	ShowWindow(SW_SHOW);
	
	CString szMAC, szEncode;
	m_RegCtrl.GetMachineCode(szMAC);
	szMAC.Format("%s", szMAC);
	
	m_RegCtrl.GetMachineEncode(szMAC, szMAC.GetLength(), szEncode, MAX_PATH);
	szEncode.Format("%s", szEncode);
	
// 	CString szKey;
// 	m_RegCtrl.GenerateEncodeKey(szEncode, szKey);
	
	m_strACode.Format("%s", szEncode);
	m_strECode.Format("");
	UpdateData(FALSE);
	
// 	if (!m_RegCtrl.WriteRegtryStrValue(HKEY_CURRENT_USER, "Software\\Microsoft\\Spunky\\iControl", "MachineCode", szKey))
// 	{
// 		MessageBox("注册信息导入失败");
// 	}
// 	else
// 	{
// 		m_strACode.Format("%s", szKey);
// 		m_strECode.Format("");
// 		UpdateData(FALSE);
// 	}

	return TRUE;  // return TRUE unless you set the focus to a control
	              // EXCEPTION: OCX Property Pages should return FALSE
}

void CRegisterDlg::OnRegister() 
{
	// TODO: Add your control notification handler code here
	m_bIsRegister = FALSE;

	UpdateData(TRUE);
	if (m_strECode.GetLength() == 16)
	{
		if (m_RegCtrl.ActiveByComputerCode(m_strECode))
		{
			if (!m_RegCtrl.WriteRegtryStrValue(HKEY_CURRENT_USER, "Software\\Microsoft\\Spunky\\iControl", "MachineCode", m_strECode))
			{				
				MessageBox("注册信息导入失败, 请再次按<注册>按钮");
			}
			else
			{
				m_bIsRegister = TRUE;
			}
		}
	}
	else
	{
		MessageBox("密码错误, 请重新确认输入");
	}

	CDialog::OnOK();
}

void CRegisterDlg::OnCancel() 
{
	// TODO: Add extra cleanup here
	m_bIsRegister = FALSE;
	CDialog::OnCancel();
}

HBRUSH CRegisterDlg::OnCtlColor(CDC* pDC, CWnd* pWnd, UINT nCtlColor) 
{
	HBRUSH hbr = CDialog::OnCtlColor(pDC, pWnd, nCtlColor);
	
	// TODO: Change any attributes of the DC here
	int CtrlID = pWnd->GetDlgCtrlID();
	if (CtrlID == IDC_HEAD_STATIC && nCtlColor == CTLCOLOR_STATIC)
	{
		pDC->SelectObject(m_pStaticAFont);
		pDC->SetBkMode(TRANSPARENT);
		pDC->SetTextColor(RGB(0, 24, 255));			// 字体颜色
        pDC->SetBkColor(RGB(0, 0, 255));		    // 字体背景色
		hbr = ::CreateSolidBrush(RGB(225, 225, 225));
	}
	else if (CtrlID == IDC_CODE_STATIC && nCtlColor == CTLCOLOR_STATIC)
	{
		pDC->SelectObject(m_pStaticBFont);
		pDC->SetBkMode(TRANSPARENT);
		pDC->SetTextColor(RGB(0, 24, 255));			// 字体颜色
        pDC->SetBkColor(RGB(0, 0, 255));		    // 字体背景色
		hbr = ::CreateSolidBrush(RGB(225, 225, 225));
	}
	else if (CtrlID == IDC_A_EDIT && nCtlColor == CTLCOLOR_EDIT)
	{
		pDC->SelectObject(m_pEditAFont);
		pDC->SetBkMode(TRANSPARENT);
		pDC->SetTextColor(RGB(64, 64, 64));			// 字体颜色
        pDC->SetBkColor(RGB(225, 225, 225));		// 字体背景色
		hbr = ::CreateSolidBrush(RGB(225, 225, 225));
	}
	else if (CtrlID == IDC_E_EDIT && nCtlColor == CTLCOLOR_EDIT)
	{
		pDC->SelectObject(m_pEditBFont);
		pDC->SetBkMode(TRANSPARENT);
		pDC->SetTextColor(RGB(64, 64, 64));			// 字体颜色
        pDC->SetBkColor(RGB(225, 225, 225));		// 字体背景色
		hbr = ::CreateSolidBrush(RGB(225, 225, 225));
	}
	else if (nCtlColor == CTLCOLOR_DLG)
	{
		pDC->SetBkMode(TRANSPARENT);
		hbr = ::CreateSolidBrush(RGB(225, 225, 225));
	}

	// TODO: Return a different brush if the default is not desired
	return hbr;
}

void CRegisterDlg::OnDestroy() 
{
	CDialog::OnDestroy();
	
	// TODO: Add your message handler code here
	m_pStaticAFont->DeleteObject();
	m_pStaticBFont->DeleteObject();
	m_pEditAFont->DeleteObject();
	m_pEditBFont->DeleteObject();
	delete m_pStaticAFont;
	delete m_pStaticBFont;
	delete m_pEditAFont;
	delete m_pEditBFont;
}
